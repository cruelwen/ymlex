#!/usr/bin/env ruby

home = File.join(File.dirname(__FILE__),'..')
$LOAD_PATH.unshift(File.join(home,'lib'))

require 'ymlex'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: ymlex [options]"
  opts.on("-t", "--template [directory]", "Path to template, default is './'") do |template_dir|
    options[:template] = template_dir
    Ymlex.initTptDir template_dir
  end
  opts.on("-p", "--product [directoy]", "Translate a directiory of ymlex files") do |product_dir|
    options[:product] = product_dir
  end
  opts.on("-j", "--[no-]show-json", "Show the instance in json") do
    options[:showjson] = true
  end
  opts.on("-y", "--[no-]show-yml", "Show the instance in yaml") do
    options[:showyml] = true
  end
  opts.on("-o", "--output [directory]", "Set output directory") do |output_dir|
    options[:output] = output_dir || "./output"
  end
  opts.on("-l", "--log [log_name]", "Trans log monitor") do |log_name|
    options[:log] = log_name
  end
  opts.on("-a", "--auto [product]", "Trans product automatically") do |product|
    options[:auto] = product
  end
  opts.on("-h", "--help", "Show this help") do
    puts opts
    exit
  end
end.parse!

case
when options[:log]
  filename = options[:log]
  log_js = {}
  File.open(filename,"r") do |f|
    log_js = JSON.parse f.read
  end
  log_yml = {}
  log_yml["path"] = log_js["log_filepath"]
  log_js["item"].each do |item|
    name = item["item_name_prefix"]
    item.delete "item_name_prefix"
    log_yml[name] = item
  end
  puts log_yml.to_yaml
  exit
when options[:auto]
  git_product = options[:auto]
  svn_product = git_product.upcase
  git_remote = "http://gitlab.baidu.com/sdc-monitor/#{git_product}.git"
  template_remote = "http://gitlab.baidu.com/sdc-monitor/template.git"
  svn_remote = "http://svn.noah.baidu.com/svn/conf/online/#{svn_product}"
  local_path = options[:output] || "./output"
  git_path = "#{local_path}/git/#{git_product}"
  template_path = "#{local_path}/git/template"
  svn_path = "#{local_path}/svn/#{svn_product}"
  system <<HD_SHELL
mkdir -p #{local_path}/git #{local_path}/svn
if [[ -d #{git_path} ]]; then
  echo "#{git_path} exist. git pull ..."
  cd #{git_path}
  git pull
  cd -
else
  echo "#{git_path} not exist. git clone ..."
  cd #{local_path}/git
  git clone #{git_remote} 
  cd -
fi
if [[ -d #{template_path} ]]; then
  echo "#{template_path} exist. git pull ..."
  cd #{template_path}
  git pull
  cd -
else
  echo "#{template_path} not exist. git clone ..."
  cd #{local_path}/git
  git clone #{template_remote} 
  cd -
fi
if [[ -d #{svn_path} ]]; then
  echo "#{svn_path} exist. svn up ..."
  cd #{svn_path}
  svn up
  cd -
else
  echo "#{svn_path} not exist. svn co ..."
  cd #{local_path}/svn
  svn co #{svn_remote} 
  cd -
fi
echo "process ymlex ..."
ymlex -p #{git_path} -t #{template_path} -o #{svn_path}
cd #{svn_path}
echo "show svn diff"
svn st | grep '?'  | awk '{print $2}' | xargs svn add
svn st | grep '!'  | awk '{print $2}' | xargs svn delete
svn diff
HD_SHELL
  puts <<HD_SHELL
output is in #{svn_path}, you may check in after comfirm the diff:
cd #{svn_path}
svn ci 
HD_SHELL
  exit
when options[:product]
  ArgusYml.process_dir options[:product], options[:output]
else
  until ARGV.empty?
    input = ARGV.shift
    ags = ArgusYml.new input
    puts ags.info_yml.to_yaml if options[:showyml]
    puts JSON.pretty_generate ags.instance if options[:showjson]
    ags.dump_json options[:output] if options[:output]
  end
end
